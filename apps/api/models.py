import datetime

from django.db import models
from django.utils.translation import ugettext_lazy as _

DATA_EVENT_TYPE = [
    ('up', _('\N{thumbs up sign}')),
    ('dn', _('\N{thumbs down sign}')),
]


class Attendee(models.Model):
    """Festival attendee

    id: UUID4 value is generated on a user's device. Can be used for URLs
    face_hash: potentially large hash string generated by Deeplens for a given face
    """
    user_id = models.UUIDField()
    face_hash = models.TextField()
    playlist = models.ManyToManyField('Song', through='PlaylistEntry', through_fields=('attendee', 'song'))

    class Meta:
        verbose_name = _('attendee')
        verbose_name_plural = _('attendees')


class Performance(models.Model):
    """Festival performance data"""
    slug = models.SlugField(_('slug'), unique=True)
    name = models.CharField(_('name'), max_length=80)
    location = models.ForeignKey('Stage', models.PROTECT)
    start_time = models.DateTimeField(_('start time'))
    end_time = models.DateTimeField(_('end time'))
    setlist = models.ManyToManyField('Song', through='SetlistEntry', through_fields=('performance', 'song'))

    class Meta:
        verbose_name = _('performance')
        verbose_name_plural = _('performances')

    def __str__(self):
        return f"{self.__class__.__name__} object ({self.name})"

    @property
    def duration(self):
        return self.end_time - self.start_time


class PlaylistEntry(models.Model):
    attendee = models.ForeignKey('Attendee', models.CASCADE)
    song = models.ForeignKey('Song', on_delete=models.CASCADE)
    performance = models.ForeignKey('Performance', on_delete=models.CASCADE)
    event_type = models.CharField(_('event type'), max_length=2, choices=DATA_EVENT_TYPE)
    timestamp = models.DateTimeField(_('timestamp'))


class SetlistEntry(models.Model):
    """Entry in a setlist"""
    performance = models.ForeignKey('Performance', on_delete=models.CASCADE)
    song = models.ForeignKey('Song', on_delete=models.CASCADE)
    start_time = models.DateTimeField(_('start time'), default=datetime.datetime.now)

    class Meta:
        ordering = ('start_time',)
        verbose_name = _("setlist entry")
        verbose_name_plural = _("setlist entries")


class Song(models.Model):
    """Song information"""
    artist = models.CharField(_("artist"), max_length=100)
    title = models.CharField(_("title"), max_length=200)
    cover = models.URLField(_("cover"), blank=True)

    def __str__(self):
        return f"{self.__class__.__name__} object ({self.artist} - {self.title})"


class Stage(models.Model):
    """Festival stages"""
    slug = models.SlugField(_('slug'), unique=True)
    name = models.CharField(_('name'), max_length=80)

    class Meta:
        verbose_name = _('stages')
        verbose_name_plural = _('stages')

    def __str__(self):
        return f"{self.__class__.__name__} object ({self.name})"


##
# Events
##
class ContentEvent(models.Model):
    """Content events are information gathered from the content ID API."""
    location = models.ForeignKey('Stage', models.PROTECT)
    timestamp = models.DateTimeField(_('timestamp'), default=datetime.datetime.now)

    class Meta:
        verbose_name = _('content event')
        verbose_name_plural = _('content events')


class DataEvent(models.Model):
    """Data points collected for attendees"""
    event_type = models.CharField(_('event type'), max_length=2, choices=DATA_EVENT_TYPE)
    attendee = models.ForeignKey('Attendee', models.PROTECT)
    location = models.ForeignKey('Stage', models.PROTECT)
    processed = models.BooleanField(_("processed"), default=False)
    timestamp = models.DateTimeField(_('timestamp'), default=datetime.datetime.now)

    class Meta:
        verbose_name = _('data event')
        verbose_name_plural = _('data events')
